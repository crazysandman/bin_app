{"ast":null,"code":"var _jsxFileName = \"/app/src/MapComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./MapComponent.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ORS_API_KEY = \"5b3ce3597851110001cf62488ef9c2a0937d4cfeb44e454ec9d93fd3\"; // OpenRouteService API-Key einf√ºgen\n\n// Icons f√ºr M√ºlleimer je nach F√ºllstand\nconst getBinIcon = fillLevel => {\n  const colors = [\"green\", \"yellow\", \"red\"];\n  const colorIndex = fillLevel <= 33 ? 0 : fillLevel <= 66 ? 1 : 2;\n  return new L.Icon({\n    iconUrl: `/icons/bin_icon_${colors[colorIndex]}.svg`,\n    iconSize: [30, 30],\n    iconAnchor: [15, 30]\n  });\n};\nconst MapComponent = () => {\n  _s();\n  const [bins, setBins] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const mapRef = useRef(null);\n  const routeLayerRef = useRef(null);\n  const [mapReady, setMapReady] = useState(false); // Zustand f√ºr Karteninstanz\n\n  // Benutzerstandort abrufen\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(position => {\n        console.log(\"üìç Standort ermittelt:\", position.coords);\n        setUserLocation({\n          latitude: position.coords.latitude,\n          longitude: position.coords.longitude\n        });\n      }, error => console.error(\"‚ö†Ô∏è Standortfehler:\", error), {\n        enableHighAccuracy: true,\n        timeout: 10000,\n        maximumAge: 0\n      });\n    } else {\n      console.error(\"‚ö†Ô∏è Geolocation wird nicht unterst√ºtzt.\");\n    }\n  }, []);\n\n  // M√ºlleimer-Daten abrufen\n  const fetchData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/bins\");\n      if (!response.ok) throw new Error(`HTTP Fehler: ${response.status}`);\n      const data = await response.json();\n      console.log(\"üóëÔ∏è M√ºlleimer geladen:\", data);\n      setBins(data.filter(b => b.latitude && b.longitude));\n    } catch (error) {\n      console.error(\"‚ö†Ô∏è Fehler beim Laden der Daten:\", error);\n    }\n  };\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 300000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Route mit OpenRouteService berechnen\n  const calculateRoute = async destination => {\n    if (!userLocation || !destination || !userLocation.latitude || !userLocation.longitude) {\n      console.warn(\"‚ö†Ô∏è Benutzerstandort oder Ziel fehlen! Warte auf Geolocation...\");\n      return;\n    }\n\n    // Falls die Karte noch nicht geladen ist, 1 Sekunde warten und erneut versuchen\n    if (!mapRef.current) {\n      console.warn(\"‚è≥ Warte auf Karteninstanz...\");\n      setTimeout(() => calculateRoute(destination), 1000);\n      return;\n    }\n    console.log(`üìç Berechne Route von [${userLocation.latitude}, ${userLocation.longitude}] zu [${destination.latitude}, ${destination.longitude}]`);\n    const map = mapRef.current;\n\n    // Vorherige Route entfernen\n    if (routeLayerRef.current) {\n      console.log(\"üîÑ Entferne alte Route...\");\n      map.removeLayer(routeLayerRef.current);\n    }\n    try {\n      const url = `https://api.openrouteservice.org/v2/directions/foot-walking?api_key=${ORS_API_KEY}&start=${userLocation.longitude},${userLocation.latitude}&end=${destination.longitude},${destination.latitude}`;\n      console.log(\"üåç API-Anfrage:\", url);\n      const response = await fetch(url);\n      if (!response.ok) throw new Error(`HTTP Fehler: ${response.status}`);\n      const data = await response.json();\n      console.log(\"üì• API-Antwort erhalten:\", data);\n      if (!data.routes || data.routes.length === 0) {\n        console.warn(\"‚ùå Keine Route gefunden!\");\n        return;\n      }\n\n      // Koordinaten f√ºr die Route extrahieren\n      const routeCoords = data.routes[0].geometry.coordinates.map(([lon, lat]) => [lat, lon]);\n      console.log(\"üó∫Ô∏è Route erhalten:\", routeCoords);\n\n      // Route auf der Karte einzeichnen\n      routeLayerRef.current = L.polyline(routeCoords, {\n        color: \"blue\",\n        weight: 5,\n        opacity: 0.7\n      }).addTo(map);\n      console.log(\"‚úÖ Route erfolgreich gezeichnet!\");\n    } catch (error) {\n      console.error(\"‚ö†Ô∏è Fehler bei der Routenberechnung:\", error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: userLocation ? [userLocation.latitude, userLocation.longitude] : [52.52, 13.405],\n      zoom: 13,\n      style: {\n        height: \"80vh\",\n        width: \"100%\"\n      },\n      whenCreated: mapInstance => {\n        console.log(\"üó∫Ô∏è Leaflet-Karte wurde erfolgreich erstellt!\");\n        mapRef.current = mapInstance; // Die Karteninstanz speichern\n        setMapReady(true); // Markiere, dass die Karte bereit ist\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 134,\n        columnNumber: 9\n      }, this), userLocation && /*#__PURE__*/_jsxDEV(Marker, {\n        position: [userLocation.latitude, userLocation.longitude],\n        icon: L.icon({\n          iconUrl: \"/icons/location.svg\",\n          iconSize: [30, 30],\n          iconAnchor: [15, 30]\n        }),\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: \"Dein Standort\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 148,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this), bins.map(bin => /*#__PURE__*/_jsxDEV(Marker, {\n        position: [bin.latitude, bin.longitude],\n        icon: getBinIcon(bin.fill_level),\n        eventHandlers: {\n          click: () => {\n            console.log(`üñ±Ô∏è M√ºlleimer geklickt: ${bin.id} - Starte Routenberechnung!`);\n            if (mapReady) {\n              calculateRoute(bin);\n            } else {\n              console.warn(\"‚è≥ Karte noch nicht bereit...\");\n            }\n          }\n        },\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"popup\",\n            children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n              children: bin.name\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 170,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n              children: [bin.fill_level, \"% gef\\xFCllt\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 171,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 169,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 168,\n          columnNumber: 13\n        }, this)\n      }, bin.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 153,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s(MapComponent, \"cnklxvVRwALp531mIgyio/faFVU=\");\n_c = MapComponent;\nexport default MapComponent;\nvar _c;\n$RefreshReg$(_c, \"MapComponent\");","map":{"version":3,"names":["React","useEffect","useState","useRef","MapContainer","TileLayer","Marker","Popup","L","jsxDEV","_jsxDEV","ORS_API_KEY","getBinIcon","fillLevel","colors","colorIndex","Icon","iconUrl","iconSize","iconAnchor","MapComponent","_s","bins","setBins","userLocation","setUserLocation","mapRef","routeLayerRef","mapReady","setMapReady","navigator","geolocation","getCurrentPosition","position","console","log","coords","latitude","longitude","error","enableHighAccuracy","timeout","maximumAge","fetchData","response","fetch","ok","Error","status","data","json","filter","b","interval","setInterval","clearInterval","calculateRoute","destination","warn","current","setTimeout","map","removeLayer","url","routes","length","routeCoords","geometry","coordinates","lon","lat","polyline","color","weight","opacity","addTo","className","children","center","zoom","style","height","width","whenCreated","mapInstance","attribution","fileName","_jsxFileName","lineNumber","columnNumber","icon","bin","fill_level","eventHandlers","click","id","name","_c","$RefreshReg$"],"sources":["/app/src/MapComponent.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from \"react\";\nimport { MapContainer, TileLayer, Marker, Popup } from \"react-leaflet\";\nimport L from \"leaflet\";\nimport \"leaflet/dist/leaflet.css\";\nimport \"./MapComponent.css\";\n\nconst ORS_API_KEY = \"5b3ce3597851110001cf62488ef9c2a0937d4cfeb44e454ec9d93fd3\"; // OpenRouteService API-Key einf√ºgen\n\n// Icons f√ºr M√ºlleimer je nach F√ºllstand\nconst getBinIcon = (fillLevel) => {\n  const colors = [\"green\", \"yellow\", \"red\"];\n  const colorIndex = fillLevel <= 33 ? 0 : fillLevel <= 66 ? 1 : 2;\n  return new L.Icon({\n    iconUrl: `/icons/bin_icon_${colors[colorIndex]}.svg`,\n    iconSize: [30, 30],\n    iconAnchor: [15, 30],\n  });\n};\n\nconst MapComponent = () => {\n  const [bins, setBins] = useState([]);\n  const [userLocation, setUserLocation] = useState(null);\n  const mapRef = useRef(null);\n  const routeLayerRef = useRef(null);\n  const [mapReady, setMapReady] = useState(false); // Zustand f√ºr Karteninstanz\n\n  // Benutzerstandort abrufen\n  useEffect(() => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          console.log(\"üìç Standort ermittelt:\", position.coords);\n          setUserLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude,\n          });\n        },\n        (error) => console.error(\"‚ö†Ô∏è Standortfehler:\", error),\n        { enableHighAccuracy: true, timeout: 10000, maximumAge: 0 }\n      );\n    } else {\n      console.error(\"‚ö†Ô∏è Geolocation wird nicht unterst√ºtzt.\");\n    }\n  }, []);\n\n  // M√ºlleimer-Daten abrufen\n  const fetchData = async () => {\n    try {\n      const response = await fetch(\"http://localhost:8000/bins\");\n      if (!response.ok) throw new Error(`HTTP Fehler: ${response.status}`);\n\n      const data = await response.json();\n      console.log(\"üóëÔ∏è M√ºlleimer geladen:\", data);\n      setBins(data.filter((b) => b.latitude && b.longitude));\n    } catch (error) {\n      console.error(\"‚ö†Ô∏è Fehler beim Laden der Daten:\", error);\n    }\n  };\n\n  useEffect(() => {\n    fetchData();\n    const interval = setInterval(fetchData, 300000);\n    return () => clearInterval(interval);\n  }, []);\n\n  // Route mit OpenRouteService berechnen\n  const calculateRoute = async (destination) => {\n    if (!userLocation || !destination || !userLocation.latitude || !userLocation.longitude) {\n      console.warn(\"‚ö†Ô∏è Benutzerstandort oder Ziel fehlen! Warte auf Geolocation...\");\n      return;\n    }\n\n    // Falls die Karte noch nicht geladen ist, 1 Sekunde warten und erneut versuchen\n    if (!mapRef.current) {\n      console.warn(\"‚è≥ Warte auf Karteninstanz...\");\n      setTimeout(() => calculateRoute(destination), 1000);\n      return;\n    }\n\n    console.log(`üìç Berechne Route von [${userLocation.latitude}, ${userLocation.longitude}] zu [${destination.latitude}, ${destination.longitude}]`);\n\n    const map = mapRef.current;\n\n    // Vorherige Route entfernen\n    if (routeLayerRef.current) {\n      console.log(\"üîÑ Entferne alte Route...\");\n      map.removeLayer(routeLayerRef.current);\n    }\n\n    try {\n      const url = `https://api.openrouteservice.org/v2/directions/foot-walking?api_key=${ORS_API_KEY}&start=${userLocation.longitude},${userLocation.latitude}&end=${destination.longitude},${destination.latitude}`;\n      console.log(\"üåç API-Anfrage:\", url);\n\n      const response = await fetch(url);\n      if (!response.ok) throw new Error(`HTTP Fehler: ${response.status}`);\n\n      const data = await response.json();\n      console.log(\"üì• API-Antwort erhalten:\", data);\n\n      if (!data.routes || data.routes.length === 0) {\n        console.warn(\"‚ùå Keine Route gefunden!\");\n        return;\n      }\n\n      // Koordinaten f√ºr die Route extrahieren\n      const routeCoords = data.routes[0].geometry.coordinates.map(([lon, lat]) => [lat, lon]);\n      console.log(\"üó∫Ô∏è Route erhalten:\", routeCoords);\n\n      // Route auf der Karte einzeichnen\n      routeLayerRef.current = L.polyline(routeCoords, {\n        color: \"blue\",\n        weight: 5,\n        opacity: 0.7,\n      }).addTo(map);\n\n      console.log(\"‚úÖ Route erfolgreich gezeichnet!\");\n    } catch (error) {\n      console.error(\"‚ö†Ô∏è Fehler bei der Routenberechnung:\", error);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <MapContainer\n        center={userLocation ? [userLocation.latitude, userLocation.longitude] : [52.52, 13.405]}\n        zoom={13}\n        style={{ height: \"80vh\", width: \"100%\" }}\n        whenCreated={(mapInstance) => {\n          console.log(\"üó∫Ô∏è Leaflet-Karte wurde erfolgreich erstellt!\");\n          mapRef.current = mapInstance; // Die Karteninstanz speichern\n          setMapReady(true); // Markiere, dass die Karte bereit ist\n        }}\n      >\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n        />\n\n        {userLocation && (\n          <Marker\n            position={[userLocation.latitude, userLocation.longitude]}\n            icon={L.icon({\n              iconUrl: \"/icons/location.svg\",\n              iconSize: [30, 30],\n              iconAnchor: [15, 30],\n            })}\n          >\n            <Popup>Dein Standort</Popup>\n          </Marker>\n        )}\n\n        {bins.map((bin) => (\n          <Marker\n            key={bin.id}\n            position={[bin.latitude, bin.longitude]}\n            icon={getBinIcon(bin.fill_level)}\n            eventHandlers={{\n              click: () => {\n                console.log(`üñ±Ô∏è M√ºlleimer geklickt: ${bin.id} - Starte Routenberechnung!`);\n                if (mapReady) {\n                  calculateRoute(bin);\n                } else {\n                  console.warn(\"‚è≥ Karte noch nicht bereit...\");\n                }\n              },\n            }}\n          >\n            <Popup>\n              <div className=\"popup\">\n                <h4>{bin.name}</h4>\n                <p>{bin.fill_level}% gef√ºllt</p>\n              </div>\n            </Popup>\n          </Marker>\n        ))}\n      </MapContainer>\n    </div>\n  );\n};\n\nexport default MapComponent;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}